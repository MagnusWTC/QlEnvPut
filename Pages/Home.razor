@page "/"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Configuration;
@using System.Text.Json;
@using QLEnvPut.Response;
@using System.Linq;
@inject IConfiguration configuration;
@inject IHttpClientFactory clientFactory;

<PageContainer Title="提交环境变量">
    <Form Loading="loading" Model="@model"
          LabelColSpan="3"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed">
        <FormItem Label="京东Cookie">
            <TextArea Rows="4" @bind-Value="@context.Env" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                提交
            </Button>
        </FormItem>
    </Form>
</PageContainer>

@code
{



    public class Model
    {
        /// <summary>
        /// 京东ck
        /// </summary>/
        [Required]
        public string Env { get; set; }
    }

    private Model model = new Model();

    private void OnFinish(EditContext editContext)
    {
        try
        {


            var ClientId = configuration.GetSection("QlConfig:ClientId").Value;
            var ClientSecret = configuration.GetSection("QlConfig:ClientSecret").Value;
            var Qlhost = configuration.GetSection("QlConfig:QlHost").Value;
            var client = clientFactory.CreateClient();
            var token = "";
            var tokenUrl = $"{Qlhost}/open/auth/token?client_id={ClientId}&client_secret={ClientSecret}";
            var data = client.GetFromJsonAsync<TokenResponse>(tokenUrl).ConfigureAwait(false).GetAwaiter().GetResult();
            if (data.code == 200)
            {
                token = data.data.token;
            }
            //获取到token 获取环境变量
            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var dd = client.GetStringAsync($"{Qlhost}/open/envs").ConfigureAwait(false).GetAwaiter().GetResult();
            var envs = client.GetFromJsonAsync<EnvsResponse>($"{Qlhost}/open/envs").ConfigureAwait(false).GetAwaiter().GetResult();
            if (envs.code == 200)
            {
                string[] values = model.Env.Split(';');
                var pt_pin = values.FirstOrDefault(m => m.Contains("pt_pin"));
                var id = GetEnvByPtIn(pt_pin, envs.data);
                var needUpdateEnv = envs.data.FirstOrDefault(x => x._id == id);
                if (needUpdateEnv!=null) { 
                    needUpdateEnv.value = model.Env?.Trim();
                    needUpdateEnv.status = 0;
                }
                //update 
                var responseMessage = client.PutAsJsonAsync($"{Qlhost}/open/envs",new { value = needUpdateEnv.value,name=needUpdateEnv.value,remarks=needUpdateEnv.remarks,_id=needUpdateEnv._id}).ConfigureAwait(false).GetAwaiter().GetResult();
                if (responseMessage.IsSuccessStatusCode)
                {
                    //启用账号
                    var response = client.PutAsJsonAsync($"{Qlhost}/open/envs/enable",new string[] {needUpdateEnv._id }).ConfigureAwait(false).GetAwaiter().GetResult();
                    if (response.IsSuccessStatusCode)
                    { 
                      
                    }

                }

            }
          
        }
        catch (Exception ex)
        {

          

        }


    }

    /// <summary>
    /// 获取ck id
    /// </summary>
    /// <param name="env"></param>
    /// <returns></returns>
    private string GetEnvByPtIn(string pt_pin, Envs[] envs)
    {
        if (envs != null)
        {

            foreach (var item in envs)
            {
                if (item.value.Contains(pt_pin))
                {
                    return item._id;
                }

            }
        }

        return null;

    }


    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;
}
